/**

Description: 
Resource template group for creating application gateway, public IP, Application Firewall and VNet configuration. 

License: 
https://github.com/equinor/ioc-shared-infrastructure/blob/master/LICENSE

*/
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "applicationName": {
      "type": "string",
      "metadata": {
        "description": "Name of the application/solution. Will be used for generating resource names."
      }
    },
    "applicationEnvironment": {
      "type": "string",
      "allowedValues": [ "dev", "test", "prod", "ee" ],
      "metadata": {
        "description": "Environment name (used as suffix for naming resources)."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "VNet address prefix and subnet address."
      }
    },
    "sslCertificateKeyVaultId": {
      "type": "string",
      "metadata": {
        "description": "ID to the KeyVault certificate secret used for SSL."
      }
    },
    "allowIpList": {
      "type": "array",
      "defaultValue": "[json(' [ ] ')]",
      "metadata": {
        "description": "List of IP's to allow traffic from"
      }
    },
    "allowGeoRegionsList": {
      "type": "array",
      "defaultValue": "[json(' [ ] ')]",
      "metadata": {
        "description": "List of geo regions to allow traffic from"
      }
    },
    "allowUrlList": {
      "type": "array",
      "defaultValue": "[json(' [ ] ')]",
      "metadata": {
        "description": "List of URL's that aren't restricted by regions. Can be API endpoints"
      }
    },
    "applications": {
      "type": "array",
      "metadata": {
        "description": "List of applications to configure in the application gateway. Array of objects. Format: { \"name\": \"testapp01\", \"fqdn\": \"testapp01.azurewebsites.net\", \"rootpath\": \"/\", \"paths\": [\"/testapp01\"]},"
        /*
          {
            "name": "testapp01", // Friendly name of the app (lowercase, no spaces)
            "fqdn": "testapp01.azurewebsites.net", // FQDN of the application load balancer (App service)
            "rootpath": "/", // Where on the backend host the app is located. Set typically to / for the app service 
            "paths": [ // List of paths in the root domain to redirect to the configured application
              "/testapp01" 
            ]
          },
        */
      }
    },
    "defaultApplication": {
      "type": "string",
      "metadata": {
        "description": "Default application (name of app)"
      }
    },
    "autoscaleConfiguration": {
      "type": "object",
      "defaultValue": {
        "minCapacity": 0,
        "maxCapacity": 10
      },
      "metadata": {
        "description": "Auto scale configuration. Will default to 0 - 10 if unset. "
      }
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "string",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "tags": {
      "type": "object"
    }
  },
  "variables": {
    "application-gateway-name": "[concat(parameters('applicationName'), '-agw-', parameters('applicationEnvironment'))]",
    "application-gateway-firewall-policy-name": "[concat(parameters('applicationName'), '-policy-', parameters('applicationEnvironment'))]",
    "application-gateway-sku": "WAF_v2",

    "public-ipv4-address-name": "[concat(parameters('applicationName'), '-pip-', parameters('applicationEnvironment'))]",
    "public-ipv4-dns-label": "[toLower(variables('application-gateway-name'))]",
    "public-ip-sku": "Standard",

    "log-analytics-workspace-name": "[concat(parameters('applicationName'), '-log-', parameters('applicationEnvironment'))]",
    "log-analytics-workspace-sku": "pergb2018", // As 2020-09-29, Log Analytics only has one available current SKU. Rest are marked as legacy

    "vnet-name": "[concat(parameters('applicationName'), '-vnet-', parameters('applicationEnvironment'))]",
    "vnet-subnet-name": "[concat(parameters('applicationName'),'-snet-', parameters('applicationEnvironment'))]",
    "network-security-group-name": "[concat(parameters('applicationName'), '-nsg-', parameters('applicationEnvironment'))]",

    "identityName": "[concat(parameters('applicationName'), '-agw-', parameters('applicationEnvironment'), '-identity')]",
    "identityID": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[variables('identityName')]",
      "apiVersion": "2018-11-30",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[variables('log-analytics-workspace-name')]",
      "apiVersion": "2020-08-01",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "[variables('log-analytics-workspace-sku')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-11-01",
      "name": "[variables('network-security-group-name')]",
      "tags": "[parameters('tags')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "HTTP",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "HTTPS",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 300,
              "direction": "Inbound"
            }
          },
          {
            "name": "agw-management-traffic",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "65200-65535",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 400,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-11-01",
      "tags": "[parameters('tags')]",
      "name": "[variables('public-ipv4-address-name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('public-ip-sku')]"
      },
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('public-ipv4-dns-label')]"
        },
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2019-11-01",
      "tags": "[parameters('tags')]",
      "name": "[variables('vnet-name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('network-security-group-name'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "enableDdosProtection": false,
        "enableVmProtection": false,
        "subnets": [
          {
            "name": "[variables('vnet-subnet-name')]",
            "properties": {
              "addressPrefix": "[parameters('vnetAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('network-security-group-name'))]"
              },
              "privateEndpointNetworkPolicies": "Enabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(variables('application-gateway-name') ,'/Microsoft.Insights/DiagService')]",
      "type": "Microsoft.Network/applicationGateways/providers/diagnosticSettings",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/applicationGateways', variables('application-gateway-name'))]"
      ],
      "properties": {
        "name": "[concat(variables('application-gateway-name') ,'/Microsoft.Insights/DiagService')]",
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('log-analytics-workspace-name'))]",
        "logs": [
          {
            "category": "ApplicationGatewayAccessLog",
            "enabled": true,
            "retentionPolicy": {
              "days": 30,
              "enabled": true
            }
          },
          {
            "category": "ApplicationGatewayPerformanceLog",
            "enabled": true,
            "retentionPolicy": {
              "days": 30,
              "enabled": true
            }
          },
          {
            "category": "ApplicationGatewayFirewallLog",
            "enabled": true,
            "retentionPolicy": {
              "days": 30,
              "enabled": true
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "timeGrain": "PT1M",
            "enabled": true,
            "retentionPolicy": {
              "days": 30,
              "enabled": true
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2020-05-01",
      "tags": "[parameters('tags')]",
      "name": "[variables('application-gateway-name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnet-name'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('public-ipv4-address-name')))]",
        "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', variables('application-gateway-firewall-policy-name'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('identityID')]": {
          }
        }
      },
      "properties": {
        "sku": {
          "name": "[variables('application-gateway-sku')]",
          "tier": "[variables('application-gateway-sku')]"
        },
        "enableHttp2": true,
        "autoscaleConfiguration": "[parameters('autoscaleConfiguration')]",
        "gatewayIPConfigurations": [
          {
            "name": "application-gateway-ipconfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnet-name'), variables('vnet-subnet-name'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "application-gateway-public-ipv4",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('public-ipv4-address-name')))]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "port_80",
            "properties": {
              "port": 80
            }
          },
          {
            "name": "port_443",
            "properties": {
              "port": 443
            }
          }
        ],
        "requestRoutingRules": [
          {
            "name": "ioc-applications-routing-rule",
            "properties": {
              "ruleType": "PathBasedRouting",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('application-gateway-name'), 'https-listener')]"
              },
              "urlPathMap": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps', variables('application-gateway-name'), 'default-urlpathmaps')]"
              }
            }
          },
          {
            "name": "http-to-https-routing-rule",
            "properties": {
              "ruleType": "Basic",
              "redirectConfiguration": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/redirectConfigurations', variables('application-gateway-name'), 'http-to-https-redirect-config')]"
              },
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('application-gateway-name'), 'http-listener')]"
              }
            }
          }
        ],
        "rewriteRuleSets": [
          {
            "name": "forward-host-header",
            "type": "Microsoft.Network/applicationGateways/rewriteRuleSets",
            "properties": {
              "rewriteRules": [
                {
                  "ruleSequence": 100,
                  "conditions": "[json(' [ ] ')]",
                  "name": "forward-host-header-rule",
                  "actionSet": {
                    "requestHeaderConfigurations": [
                      {
                        "headerName": "X-Forwarded-Host",
                        "headerValue": "{var_host}"
                      },
                      {
                        "headerName": "X-Forwarded-Proto",
                        "headerValue": "{var_request_scheme}"
                      }
                    ],
                    "responseHeaderConfigurations": "[json(' [ ] ')]"
                  }
                }
              ]
            }
          }
        ],
        "redirectConfigurations": [
          {
            "name": "http-to-https-redirect-config",
            "properties": {
              "redirectType": "Permanent",
              "targetListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('application-gateway-name'), 'https-listener')]"
              },
              "includePath": true,
              "includeQueryString": true
            }

          }
        ],
        "httpListeners": [
          {
            "name": "http-listener",
            "properties": {
              "firewallPolicy": {
                "id": "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', variables('application-gateway-firewall-policy-name'))]"
              },
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('application-gateway-name'), 'application-gateway-public-ipv4')]"
              },
              "frontendPort": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts',variables('application-gateway-name'), 'port_80')]"
              },
              "protocol": "Http",
              "requireServerNameIndication": false
            }
          },
          {
            "name": "https-listener",
            "properties": {
              "firewallPolicy": {
                "id": "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', variables('application-gateway-firewall-policy-name'))]"
              },
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('application-gateway-name'), 'application-gateway-public-ipv4')]"
              },
              "frontendPort": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('application-gateway-name'), 'port_443')]"
              },
              "SslCertificate": {
                // "Id": "[concat(variables('application-gateway-name'), '/sslCertificates/appGatewaySslCert')]"
                "id": "[resourceId('Microsoft.Network/applicationGateways/sslCertificates', variables('application-gateway-name'), 'default-appgw-ssl-cert')]"
              },
              "protocol": "Https",
              "requireServerNameIndication": false
            }
          }
        ],
        "sslCertificates": [
          {
            "name": "default-appgw-ssl-cert",
            "properties": {
              "keyVaultSecretId": "[parameters('sslCertificateKeyVaultId')]"
            }
          }
        ],
        "webApplicationFirewallConfiguration": {
          "enabled": true,
          "firewallMode": "Prevention",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.1",
          "disabledRuleGroups": "[json(' [ ] ')]",
          "requestBodyCheck": true,
          "maxRequestBodySizeInKb": 128,
          "fileUploadLimitInMb": 100
        },
        "firewallPolicy": {
          "id": "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', variables('application-gateway-firewall-policy-name'))]"
        },
        "forceFirewallPolicyAssociation": true,
        "urlPathMaps": [
          {
            "name": "default-urlpathmaps",
            "properties": {
              "defaultBackendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('application-gateway-name'), concat(parameters('defaultApplication'), '-pool'))]"
              },
              "defaultBackendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('application-gateway-name'), concat(parameters('defaultApplication'), '-http-settings'))]"
              },
              "defaultRewriteRuleSet": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/rewriteRuleSets', variables('application-gateway-name'), 'forward-host-header')]"
              },
              "copy": [
                {
                  "name": "pathRules",
                  "count": "[length(parameters('applications'))]",
                  "input": {
                    "name": "[concat(parameters('applications')[copyIndex('pathRules')].name, '-routing-rule')]",
                    "properties": {
                      "paths": "[parameters('applications')[copyIndex('pathRules')].paths]",
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('application-gateway-name'), concat(parameters('applications')[copyIndex('pathRules')].name, '-pool'))]"
                      },
                      "backendHttpSettings": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('application-gateway-name'), concat(parameters('applications')[copyIndex('pathRules')].name, '-http-settings'))]"
                      },
                      "rewriteRuleSet": {
                        "id": "[resourceId('Microsoft.Network/applicationGateways/rewriteRuleSets', variables('application-gateway-name'), 'forward-host-header')]"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "copy": [
          {
            "name": "backendAddressPools",
            "count": "[length(parameters('applications'))]",
            "input": {
              "name": "[concat(parameters('applications')[copyIndex('backendAddressPools')].name, '-pool')]",
              "properties": {
                "backendAddresses": [
                  {
                    "fqdn": "[parameters('applications')[copyIndex('backendAddressPools')].fqdn]"
                  }
                ]
              }
            }
          },
          {
            "name": "probes",
            "count": "[length(parameters('applications'))]",
            "input": {
              "name": "[concat(parameters('applications')[copyIndex('probes')].name, '-probe')]",
              "properties": {
                "protocol": "Https",
                "host": "[parameters('applications')[copyIndex('probes')].fqdn]",
                "path": "/ping",
                "interval": 30,
                "timeout": 30,
                "unhealthyThreshold": 6
              }
            }
          },
          {
            "name": "backendHttpSettingsCollection",
            "count": "[length(parameters('applications'))]",
            "input": {
              "name": "[concat(parameters('applications')[copyIndex('backendHttpSettingsCollection')].name, '-http-settings')]",
              "properties": {
                "port": 443,
                "path": "[parameters('applications')[copyIndex('backendHttpSettingsCollection')].rootpath]",
                "protocol": "Https",
                "cookieBasedAffinity": "Disabled",
                "pickHostNameFromBackendAddress": true,
                "requestTimeout": 300,
                "probe": {
                  "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('application-gateway-name'), concat(parameters('applications')[copyIndex('backendHttpSettingsCollection')].name, '-probe'))]"
                }
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
      "apiVersion": "2020-05-01",
      "tags": "[parameters('tags')]",
      "name": "[variables('application-gateway-firewall-policy-name')]",
      "location": "[parameters('location')]",
      "properties": {
        "customRules": [
          {
            "name": "AllowIpAddresses",
            "priority": 10,
            "ruleType": "MatchRule",
            "action": "Allow",
            "matchConditions": [
              {
                "matchVariables": [
                  {
                    "variableName": "RemoteAddr"
                  }
                ],
                "operator": "IPMatch",
                "negationConditon": false,
                "matchValues": "[parameters('allowIpList')]",
                "transforms": "[json(' [ ] ')]"
              }
            ]
          },
          {
            "name": "AllowUrls",
            "priority": 20,
            "ruleType": "MatchRule",
            "action": "Allow",
            "matchConditions": [
              {
                "matchVariables": [
                  {
                    "variableName": "RequestUri"
                  }
                ],
                "operator": "Contains",
                "negationConditon": false,
                "matchValues": "[parameters('allowUrlList')]",
                "transforms": [
                  "Lowercase"
                ]
              }
            ]
          },
          {
            "name": "DenyNonApprovedGeoTraffic",
            "priority": 100,
            "ruleType": "MatchRule",
            "action": "Block",
            "matchConditions": [
              {
                "matchVariables": [
                  {
                    "variableName": "RemoteAddr"
                  }
                ],
                "operator": "GeoMatch",
                "negationConditon": true,
                "matchValues": "[parameters('allowGeoRegionsList')]",
                "transforms": "[json(' [ ] ')]"
              }
            ]
          }
        ],
        "policySettings": {
          "requestBodyCheck": true,
          "maxRequestBodySizeInKb": 128,
          "fileUploadLimitInMb": 100,
          "state": "Enabled",
          "mode": "Prevention"
        },
        "managedRules": {
          "managedRuleSets": [
            {
              "ruleSetType": "OWASP",
              "ruleSetVersion": "3.1"
            },
            {
              "ruleSetType": "Microsoft_BotManagerRuleSet",
              "ruleSetVersion": "0.1"
            }
          ],
          "exclusions": [
            {
              "matchVariable": "RequestArgNames",
              "selectorMatchOperator": "Equals",
              "selector": "code"
            },
            {
              "matchVariable": "RequestCookieNames",
              "selectorMatchOperator": "Equals",
              "selector": "_oauth2_proxy"
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "publicIPAddress": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('public-ipv4-address-name'))).IpAddress]"
    }
  }
}
