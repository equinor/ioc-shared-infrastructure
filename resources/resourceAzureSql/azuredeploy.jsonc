{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "sqlServerName": {
            "type": "string",
            "metadata": {
                "description": "The name of the SQL logical server."
            }
        },
        "sqlAssignIdentity" : {
            "type": "bool",
            "defaultValue" : false,
            "metadata" : {
                "description" : "If the SQL Server should get assigned an identity in Active Directory."
            }
        },
        "sqlServerAdministratorLogin" : {
            "type" : "securestring",
            "metadata" : {
                "description" : "The administrator login of the logical SQL server."
            }
        },
        "sqlServerAdministratorLoginPassword": {
            "type": "securestring",
            "metadata" : {
                "description" : "The administrator login password of the logical SQL server."
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "The name of the storage account used by the Azure SQL."
            }
        },
        "sqlActiveDirectoryAdminName": {
            "type": "string",
            "metadata": {
                "description": "The active directory admin of the SQL Server."
            }
        },
        "sqlActiveDirectoryAdminObjectId": {
            "type": "string",
            "metadata": {
                "description": "The object id of the active directory admin. This can be found in Azure Active Directory."
            }
        },
        "sqlActiveDirectoryAdminTenant": {
            "type": "string",
            "metadata": {
                "description": "The tenant of the active directory admin"
            },
            "defaultValue": "[subscription().tenantId]"
        },
        "sqlFirewallIpRules": {
            "type": "array",
            "metadata": {
                "description": "Object containing all the IP exceptions to add in the firewall."
            },
            "defaultValue" : []
        },
        "sqlSecurityAlertPoliciesNotificationEmails": {
            "type": "array",
            "metadata": {
                "description": "The receivers of security alerts on the sql server."
            },
            "defaultValue" : []
        },
        "sqlVulnerabilityAssessmentNotificationReceivers": {
            "type": "array",
            "metadata": {
                "description": "The receivers of results generated by the vulnerability scans on the sql server."
            },
            "defaultValue" : []
        },
        "isStorageBehindVnet": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Auditing to storage behind Virtual Network or firewall rules. The user deploying the template must have an administrator or owner permissions."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources within this template."
            }
        },
        "tags": {
            "type": "object",
            "metadata" : {
                "description" : "The tags to append on each resource created."
            }
        }
    },
    "variables": {
        "StorageBlobContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(resourceGroup().id))]",
        "uniqueRoleGuid": "[guid(resourceId('Microsoft.Storage/storageAccounts',  parameters('storageAccountName')), variables('storageBlobContributor'), resourceId('Microsoft.Sql/servers', variables('serverName')))]",
        "serverName" : "[toLower(parameters('sqlServerName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageAccountName')]",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "[if(parameters('isStorageBehindVnet') , 'Deny', 'Allow')]"
                }
            },
            "tags": "[parameters('tags')]",
            "resources": [
                {
                    "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                    "condition": "[parameters('isStorageBehindVnet')]",
                    "apiVersion": "2020-03-01-preview",
                    "name": "[concat(parameters('storageAccountName'), '/Microsoft.Authorization/', variables('uniqueRoleGuid'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
                    ],
                    "properties": {
                        "roleDefinitionId": "[variables('StorageBlobContributor')]",
                        "principalId": "[reference(resourceId('Microsoft.Sql/servers', variables('serverName')), '2019-06-01-preview', 'Full').identity.principalId]",
                        "scope": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                        "principalType": "ServicePrincipal"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2019-06-01-preview",
            "location": "[parameters('location')]",
            "name": "[variables('serverName')]",
            "identity": "[if(or(parameters('isStorageBehindVnet'), parameters('sqlAssignIdentity')), json('{\"type\":\"SystemAssigned\"}'), json('null'))]",
            "properties": {
                "administratorLogin": "[parameters('sqlServerAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('sqlServerAdministratorLoginPassword')]",
                "version": "12.0"
            },
            "tags": "[parameters('tags')]",
            "resources": [
                {
                    "type": "Microsoft.Sql/servers/administrators",
                    "apiVersion": "2019-06-01-preview",
                    "name": "[concat(variables('serverName'), '/ActiveDirectory')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "administratorType": "ActiveDirectory",
                        "login": "[parameters('sqlActiveDirectoryAdminName')]",
                        "sid": "[parameters('sqlActiveDirectoryAdminObjectId')]",
                        "tenantId": "[parameters('sqlActiveDirectoryAdminTenant')]"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/auditingSettings",
                    "apiVersion": "2019-06-01-preview",
                    "name": "[concat(variables('serverName'), '/AuditSettings')]",
                    "dependsOn": [
                        "[parameters('storageAccountName')]",
                        "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments/', variables('uniqueRoleGuid'))]",
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "state": "Enabled",
                        "storageEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').PrimaryEndpoints.Blob]",
                        "storageAccountAccessKey": "[if(parameters('isStorageBehindVnet'), json('null'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value)]",
                        "storageAccountSubscriptionId": "[subscription().subscriptionId]",
                        "isStorageSecondaryKeyInUse": false
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
                    "name": "[concat(variables('serverName'), '/VulnerabilityAssessments')]",
                    "apiVersion": "2019-06-01-preview",
                    "dependsOn": [
                        "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Microsoft.Authorization/roleAssignments/', variables('uniqueRoleGuid'))]",
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "storageContainerPath": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').PrimaryEndpoints.Blob, 'vulnerability-assessment')]",
                        "storageAccountAccessKey": "[if(parameters('isStorageBehindVnet'), json('null'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value)]",
                        "recurringScans": {
                            "isEnabled": "true",
                            "emailSubscriptionAdmins": "false",
                            "emails": "[parameters('sqlVulnerabilityAssessmentNotificationReceivers')]"
                        }
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/securityAlertPolicies",
                    "apiVersion": "2020-02-02-preview",
                    "name": "[concat(variables('serverName'), '/SecurityAlertPolicies')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "state": "Enabled",
                        "disabledAlerts": [
                            ""
                        ],
                        "emailAddresses": "[parameters('sqlSecurityAlertPoliciesNotificationEmails')]",
                        "emailAccountAdmins": true,
                        "retentionDays": 0
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('serverName'), '/ForceLastGoodPlan')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Enabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('serverName'), '/CreateIndex')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]",
                        "[resourceId('Microsoft.Sql/servers/advisors', variables('serverName'), 'ForceLastGoodPlan')]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('serverName'), '/DropIndex')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]",
                        "[resourceId('Microsoft.Sql/servers/advisors', variables('serverName'), 'CreateIndex')]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Disabled"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Sql/servers/firewallRules",
            "apiVersion": "2015-05-01-preview",
            "name": "[concat(variables('serverName'), '/',parameters('sqlFirewallIpRules')[copyIndex()].name)]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
            ],
            "properties": {
                "startIpAddress": "[parameters('sqlFirewallIpRules')[copyIndex('AddFireWallRules')].startIp]",
                "endIpAddress": "[parameters('sqlFirewallIpRules')[copyIndex('AddFireWallRules')].endIp]"
            },
            "copy": {
                "name": "AddFireWallRules",
                "count": "[length(parameters('sqlFirewallIpRules'))]"
            }
        }
    ],
    "outputs" : {
        "fullyQualifiedDomainName" : {
            "type" : "string",
            "value": "[reference(resourceId('Microsoft.Sql/servers', variables('serverName'))).fullyQualifiedDomainName]"
        }
    }
}