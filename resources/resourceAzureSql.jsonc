{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "applicationPrefix": {
            "type": "string",
            "metadata": {
                "description": "For more details https://iocdocs.azurewebsites.net/introduction/arm/#common-parameters"
            }
        },
        "applicationName": {
            "type": "string",
            "metadata": {
                "description": "For more details https://iocdocs.azurewebsites.net/introduction/arm/#common-parameters"
            }
        },
        "applicationEnvironment": {
            "type": "string",
            "allowedValues": [ "dev", "test", "prod", "ee" ],
            "metadata": {
                "description": "For more details https://iocdocs.azurewebsites.net/introduction/arm/#common-parameters"
            }
        },
        "additionalTags": {
            "type": "object",
            "defaultValue": [],
            "metadata": {
                "description": "Additional tags that must be applied to each resource. All resources will be tagget by default with environment and application name"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources within this template."
            }
        },
        "sqlActiveDirectoryAdmin": {
            "type": "string",
            "metadata": {
                "description": "The active directory admin of the SQL Server"
            }
        },
        "sqlActiveDirectoryAdminSid": {
            "type": "string",
            "metadata": {
                "description": "The object id of the active directory admin. This can be found in Azure Active Directory."
            }
        },
        "sqlActiveDirectoryAdminTenant" : {
            "type" : "string",
            "metadata" : {
                "description" : "The tenant of the active directory admin"
            },
            "defaultValue" : "[subscription().tenantId]"          
        },
        "sqlFirewallIpRules": {
            "type": "array",
            "metadata": {
                "description": "Object containing all the IP exceptions to add in the firewall."
            }
        },
        "sqlSecurityAlertPoliciesNotificationEmails": {
            "type": "array",
            "metadata": {
                "description": "The receivers of security alerts on the sql server."
            }
        },
        "sqlVulnerabilityAssessmentNotificationReceivers": {
            "type": "array",
            "metadata": {
                "description": "The receivers of results generated by the vulnerability scans on the sql server."
            }
        },
        "sqlDatabases": {
            "type": "array",
            "metadata": {
                "description": "An array of databases you want to create."
            }            
        },
        "isStorageBehindVnet": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable Auditing to storage behind Virtual Network or firewall rules. The user deploying the template must have an administrator or owner permissions."
            }
        }
    },
    "variables": {
        "StorageBlobContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "uniqueRoleGuid": "[guid(resourceId('Microsoft.Storage/storageAccounts',  variables('storageAccountName')), variables('storageBlobContributor'), resourceId('Microsoft.Sql/servers', variables('sqlServerName')))]",
        "sqlServerName": "[concat(toLower(parameters('applicationPrefix')), '-' ,parameters('applicationName'), '-sql-', toLower(parameters('applicationEnvironment')))]",
        "storageAccountName": "[concat(toLower(replace(parameters('applicationPrefix'), '-' ,'')), toLower(parameters('applicationName')), 'st', toLower(parameters('applicationEnvironment')))]",
        "defaultResourceTags": {
            "Environment": "[parameters('applicationEnvironment')]",
            "Service Name": "[parameters('applicationName')]"
        },
        "resourceTags": "[union(variables('defaultResourceTags'), parameters('additionalTags'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "[if(parameters('isStorageBehindVnet'), 'Deny', 'Allow')]"
                }
            },
            "tags": "[variables('resourceTags')]",
            "resources": [
                {
                    "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                    "condition": "[parameters('isStorageBehindVnet')]",
                    "apiVersion": "2020-03-01-preview",
                    "name": "[concat(variables('storageAccountName'), '/Microsoft.Authorization/', variables('uniqueRoleGuid'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
                    ],
                    "properties": {
                        "roleDefinitionId": "[variables('StorageBlobContributor')]",
                        "principalId": "[reference(resourceId('Microsoft.Sql/servers', variables('sqlServerName')), '2019-06-01-preview', 'Full').identity.principalId]",
                        "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                        "principalType": "ServicePrincipal"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2019-06-01-preview",
            "location": "[parameters('location')]",
            "name": "[variables('sqlServerName')]",
            "identity": "[if(parameters('isStorageBehindVnet'), json('{\"type\":\"SystemAssigned\"}'), json('null'))]",
            "properties": {
                "administratorLogin": "[concat('S039l', uniqueString(resourceGroup().id, '2cfa6146-2e5a-4e0d-b116-aa35193796c1'))]",
                "administratorLoginPassword": "[concat('S039p', uniqueString(resourceGroup().id, '2d46c83a-7c69-4c26-a107-6faea4fb80ac'), uniqueString(resourceGroup().id, '9e65312c-a2e3-4d40-a13d-6294aaf4650e'))]",
                "version": "12.0"
            },
            "tags": "[variables('resourceTags')]",
            "resources": [
                {
                    "type": "Microsoft.Sql/servers/administrators",
                    "apiVersion": "2019-06-01-preview",
                    "name": "[concat(variables('sqlServerName'), '/ActiveDirectory')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    ],
                    "properties": {
                        "administratorType": "ActiveDirectory",
                        "login": "[parameters('sqlActiveDirectoryAdmin')]",
                        "sid": "[parameters('sqlActiveDirectoryAdminSid')]",
                        "tenantId": "[parameters('sqlActiveDirectoryAdminTenant')]"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/auditingSettings",
                    "apiVersion": "2019-06-01-preview",
                    "name": "[concat(variables('sqlServerName'), '/AuditSettings')]",
                    "dependsOn": [
                        "[variables('sqlServerName')]",
                        "[variables('storageAccountName')]",
                        "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), 'Microsoft.Authorization/roleAssignments/', variables('uniqueRoleGuid'))]",
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    ],
                    "properties": {
                        "state": "Enabled",
                        "storageEndpoint": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').PrimaryEndpoints.Blob]",
                        "storageAccountAccessKey": "[if(parameters('isStorageBehindVnet'), json('null'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
                        "storageAccountSubscriptionId": "[subscription().subscriptionId]",
                        "isStorageSecondaryKeyInUse": false
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/vulnerabilityAssessments",
                    "name": "[concat(variables('sqlServerName'), '/VulnerabilityAssessments')]",
                    "apiVersion": "2019-06-01-preview",
                    "dependsOn": [
                        "[variables('sqlServerName')]",
                        "[variables('storageAccountName')]",
                        "[extensionResourceId(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), 'Microsoft.Authorization/roleAssignments/', variables('uniqueRoleGuid'))]",
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    ],
                    "properties": {
                        "storageContainerPath": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').PrimaryEndpoints.Blob, 'vulnerability-assessment')]",
                        "storageAccountAccessKey": "[if(parameters('isStorageBehindVnet'), json('null'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]",
                        "recurringScans": {
                            "isEnabled": "true",
                            "emailSubscriptionAdmins": "false",
                            "emails": "[parameters('sqlVulnerabilityAssessmentNotificationReceivers')]"
                        }
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/securityAlertPolicies",
                    "apiVersion": "2019-06-01-preview",
                    "name": "[concat(variables('sqlServerName'), '/SecurityAlertPolicies')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    ],
                    "properties": {
                        "state": "Enabled",
                        "disabledAlerts": [
                            ""
                        ],
                        "emailAddresses": "[parameters('sqlSecurityAlertPoliciesNotificationEmails')]",
                        "emailAccountAdmins": true,
                        "retentionDays": 0
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sqlServerName'), '/ForceLastGoodPlan')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Enabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sqlServerName'), '/CreateIndex')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    ],
                    "properties": {                                               
                        "autoExecuteValue": "Disabled"
                    }
                },
                {
                    "type": "Microsoft.Sql/servers/advisors",
                    "apiVersion": "2014-04-01",
                    "name": "[concat(variables('sqlServerName'), '/DropIndex')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
                    ],
                    "properties": {
                        "autoExecuteValue": "Disabled"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Sql/servers/firewallRules",
            "apiVersion": "2015-05-01-preview",
            "name": "[concat(variables('sqlServerName'), '/',parameters('sqlFirewallIpRules')[copyIndex()].name)]",
            "dependsOn": [
                "[variables('sqlServerName')]"
            ],
            "properties": {
                "startIpAddress": "[parameters('sqlFirewallIpRules')[copyIndex('AddFireWallRules')].startIp]",
                "endIpAddress": "[parameters('sqlFirewallIpRules')[copyIndex('AddFireWallRules')].endIp]"
            },
            "copy": {
                "name": "AddFireWallRules",
                "count": "[length(parameters('sqlFirewallIpRules'))]"
            }
        },
        {            
            "type": "Microsoft.Sql/servers/databases",            
            "apiVersion": "2019-06-01-preview",
            "name": "[concat(variables('sqlServerName'),'/',parameters('sqlDatabases')[copyIndex('AddSqlDatabases')].name)]",
            "location": "[parameters('location')]",
            "tags": "[variables('resourceTags')]",
            "sku": "[parameters('sqlDatabases')[copyIndex('AddSqlDatabases')].sku]",
            "properties": {
                "collation": "[parameters('sqlDatabases')[copyIndex('AddSqlDatabases')].collation]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', concat(variables('sqlServerName')))]"
            ],
            "copy": {
                "name": "AddSqlDatabases",
                "count": "[length(parameters('sqlDatabases'))]"
            }
        }
    ]
}