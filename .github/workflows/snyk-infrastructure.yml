# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which checks out your Infrastructure as Code Configuration files,
# such as Kubernetes, Helm & Terraform and scans them for any security issues.
# The results are then uploaded to GitHub Security Code Scanning
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Infrastructure as Code

on:
  push:
    branches: [ "master" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
#      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      #actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build bicep - web app
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceApp/azuredeploy.bicep
          outputFilePath: ./resources/resourceApp/azuredeploy-temp.json

      - name: Build bicep - app config
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceAppConfiguration/azuredeploy.bicep
          outputFilePath: ./resources/resourceAppConfiguration/azuredeploy-temp.json

      - name: Build bicep - app insights
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceAppInsights/azuredeploy.bicep
          outputFilePath: ./resources/resourceAppInsights/azuredeploy-temp.json

      - name: Build bicep - app service plan
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceAppServicePlan/azuredeploy.bicep
          outputFilePath: ./resources/resourceAppServicePlan/azuredeploy-temp.json

      - name: Build bicep - container registry
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceContainerRegistry/azuredeploy.bicep
          outputFilePath: ./resources/resourceContainerRegistry/azuredeploy-temp.json

      - name: Build bicep - containerregistry task
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceContainerRegistryTask/azuredeploy.bicep
          outputFilePath: ./resources/resourceContainerRegistryTask/azuredeploy-temp.json          

      - name: Build bicep - key vault
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceKeyVault/azuredeploy.bicep
          outputFilePath: ./resources/resourceKeyVault/azuredeploy-temp.json

      - name: Build bicep - key vault access
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceKeyVaultAccess/azuredeploy.bicep
          outputFilePath: ./resources/resourceKeyVaultAccess/azuredeploy-temp.json

      - name: Build bicep - key vault secrets
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceKeyVaultSecrets/azuredeploy.bicep
          outputFilePath: ./resources/resourceKeyVaultSecrets/azuredeploy-temp.json

      - name: Build bicep - log analytics workspace
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceLogAnalyticsWorkspace/azuredeploy.bicep
          outputFilePath: ./resources/resourceLogAnalyticsWorkspace/azuredeploy-temp.json

      - name: Build bicep - postgresql flexible databases
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourcePostgresqlFlexibleDatabases/azuredeploy.bicep
          outputFilePath: ./resources/resourcePostgresqlFlexibleDatabases/azuredeploy-temp.json          

      - name: Build bicep - postgresql flexible server
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourcePostgresqlFlexibleServer/azuredeploy.bicep
          outputFilePath: ./resources/resourcePostgresqlFlexibleServer/azuredeploy-temp.json

      - name: Build bicep - eventhub
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceEventHub/azuredeploy.bicep
          outputFilePath: ./resources/resourceEventHub/azuredeploy-temp.json  
 
      - name: Build bicep - storage account
        continue-on-error: true
        uses: Azure/bicep-build-action@v1.0.1
        with: 
          bicepFilePath: ./resources/resourceStorageAccounts/azuredeploy.bicep
          outputFilePath: ./resources/resourceStorageAccounts/azuredeploy-temp.json  

      - name: Run Snyk to check configuration files for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --report
        #with:
          # Add the path to the configuration file that you would like to test.
          # For example `deployment.yaml` for a Kubernetes deployment manifest
          # or `main.tf` for a Terraform configuration file
          #file: your-file-to-test.yaml
#      - name: Upload result to GitHub Code Scanning
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk.sarif
